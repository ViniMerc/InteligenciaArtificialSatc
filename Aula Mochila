{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Aula Mochila","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPHhGPjJ5CLlSiQ3vTYDRo2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":23,"metadata":{"id":"nMSh80a5MEmx","executionInfo":{"status":"ok","timestamp":1654015233083,"user_tz":180,"elapsed":389,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"outputs":[],"source":["#importando as libs\n","import numpy as np\n","import pandas as pd\n","import random as rd\n","from random import randint\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["# Numero de itens - 10\n","n = 10\n","numero_itens = np.arange(1,n+1)\n","#gerando randomicamente os pesos\n","pesos = np.random.randint(1,15,size = n)\n","#gerando randomicamente os valores de cada item\n","valores = np.random.randint(10, 750, size = n)\n","# Definindo o peso maximo para mochila\n","max_peso_mochila = 35"],"metadata":{"id":"qSvcbG68MjH4","executionInfo":{"status":"ok","timestamp":1654015233661,"user_tz":180,"elapsed":27,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["#printando as informações\n","print('Item. Peso (Kg) Valor($)')\n","for i in range(numero_itens.shape[0]):\n","  print('{0}     {1}     {2}\\n'.format(numero_itens[i], pesos[i], valores[i]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ehK8f3JiNHMX","executionInfo":{"status":"ok","timestamp":1654015233661,"user_tz":180,"elapsed":26,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}},"outputId":"1d3ab021-c299-4a3b-f666-909f7f83d442"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Item. Peso (Kg) Valor($)\n","1     11     316\n","\n","2     4     95\n","\n","3     11     27\n","\n","4     4     111\n","\n","5     10     719\n","\n","6     13     288\n","\n","7     10     495\n","\n","8     3     48\n","\n","9     8     435\n","\n","10     9     746\n","\n"]}]},{"cell_type":"code","source":["# Numero de soluções ou individuos por população\n","solucao_por_populacao = 8\n","tamanho_populacao = (solucao_por_populacao, numero_itens.shape[0])\n","print('Tamanho da população = {}'.format(tamanho_populacao[0]))\n","print('Numero de individuos (soluções) = {}'.format(tamanho_populacao[0]))\n","print('Numero itens (genes) = {}'.format(tamanho_populacao[1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6o0k8Z8kOdkX","executionInfo":{"status":"ok","timestamp":1654015233662,"user_tz":180,"elapsed":23,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}},"outputId":"953f0f11-dea6-4791-f475-0dc84b36322f"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Tamanho da população = 8\n","Numero de individuos (soluções) = 8\n","Numero itens (genes) = 10\n"]}]},{"cell_type":"code","source":["#inicialização da população\n","#gerando randomicamente\n","populacao_inicial = np.random.randint(2, size = tamanho_populacao)\n","#convertendo os tipos dos genes para intero\n","populacao_inicial = populacao_inicial.astype(int)\n","#defininfo o numero de gerações\n","n_geracoes = 300\n","print('População Inicial: \\n{}'.format(populacao_inicial))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"keYHswX2Ps1Q","executionInfo":{"status":"ok","timestamp":1654015233662,"user_tz":180,"elapsed":21,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}},"outputId":"31dbce2d-7432-4b69-f593-331850cdb10f"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["População Inicial: \n","[[0 1 1 1 1 1 0 0 0 0]\n"," [1 0 1 0 0 1 0 0 1 0]\n"," [0 1 1 0 1 0 1 0 0 0]\n"," [0 1 0 0 0 0 0 0 1 0]\n"," [0 1 0 1 0 1 0 0 0 0]\n"," [0 1 0 0 1 1 0 0 0 0]\n"," [0 0 1 0 1 1 1 0 0 0]\n"," [0 1 1 1 1 1 0 0 0 0]]\n"]}]},{"cell_type":"code","source":["# Função para calcular o fitness de cada individuo\n","def cal_fitness(peso, valor, populacao, max_peso_mochila):\n","  fitness = np.empty(populacao.shape[0])\n","  #percorre cada individuo\n","  for i in range(populacao.shape[0]):\n","    #multiplica os itens que o individuo ta levando pelo valor e soma\n","    S1 = np.sum(populacao[1] * valor)\n","    #multiplica os itens que o individuo ta levando pelo peso e soma\n","    S2 = np.sum(populacao[1] * peso)\n","    #verifica se o valor não passou da capacidade maxima da mochila\n","    if S2 <= max_peso_mochila:\n","      #armazena o fitness do individuo\n","      fitness[i] = S1\n","    else:\n","      # Passou da capacidade max logo valor 0\n","      fitness[i] = 0\n","  return fitness.astype(int)"],"metadata":{"id":"USuv9mmORkLg","executionInfo":{"status":"ok","timestamp":1654015233662,"user_tz":180,"elapsed":20,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Função para seleção dos individuos \n","def selecao_roleta(fitness,numero_pais, populacao):\n","  #soma todos os fitness\n","  max_fitness = sum(fitness)\n","  #calcula a probabilidade de cada um\n","  probabilidades = fitness/max_fitness\n","  #realiza a seleção com base nas probabilidades\n","  selecionados = populacao[np.random.choice(len(populacao),\n","                                            size=numero_pais,\n","                                            p=probabilidades)]\n","  return selecionados"],"metadata":{"id":"68UPf7UHUr_Y","executionInfo":{"status":"ok","timestamp":1654015233663,"user_tz":180,"elapsed":20,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["def crossover(pais, numero_filhos):\n","  \n","  filhos = np.empty((numero_filhos, pais.shape[1]))\n","  # O ponto em que o cruzamento ocorre entre dois pais\n","  ponto_crossover = int(pais.shape[1]/2)\n","  for k in range(numero_filhos):\n","    #Indice do primeiro a ser fatiado\n","    pai_1_idx = k%pais.shape[0]\n","    #Indice do segundo a ser fatiado\n","    pai_2_idx = (k+1)%pais.shape[0]\n","    # A nova prole tera sua primeira metade de seus genes retirados do primeiro pai\n","    filhos[k, 0:ponto_crossover] = pais[pai_1_idx, 0:ponto_crossover]\n","    # A nova prole tera sua segunda metade de seus genes retirados do segunda pai\n","    filhos[k, ponto_crossover:] = pais[pai_2_idx, ponto_crossover:]\n","  return filhos"],"metadata":{"id":"y_Xmmfhca6c5","executionInfo":{"status":"ok","timestamp":1654015233663,"user_tz":180,"elapsed":20,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["def mutacao(filhos):\n","  #Cria um vetor para armazenar os individuos mutatos\n","  mutacoes = np.empty((filhos.shape))\n","  #percorre todos os filhos\n","  for i in range (mutacoes.shape[0]):\n","    #Pega aleatoriamente (posição) um gene do filho\n","    posicao_gene = randint(0,filhos.shape[1]-1)\n","    #Se aquele gene é 0 muda para 1\n","    if mutacoes[i,posicao_gene] == 0:\n","      mutacoes[i,posicao_gene] = 1\n","    # Se aquele gene é 1 muda pra 0\n","    else:\n","      mutacoes[i,posicao_gene] = 0\n","  return mutacoes"],"metadata":{"id":"RZ3B49Mne29T","executionInfo":{"status":"ok","timestamp":1654015233663,"user_tz":180,"elapsed":20,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["def rodar_AG(pesos, valores, populacao, tamanho_populacao, n_geracoes, max_peso_mochila):\n","    #Criando variaveis para parametros, historico de fitness\n","    parametros, historico_fitness = [], []\n","    #calculando o numero de pais\n","    numero_pais = int(tamanho_populacao[0]/2)\n","    #calculando o numero de filhos\n","    numero_filhos = tamanho_populacao[0] - numero_pais\n","    fitness = []\n","    print('Numero de pais {} e Numero de filhos {}'.format(numero_pais,numero_filhos))\n","\n","    #Repetição ate o numero de gerações setado\n","    for i in range(n_geracoes):\n","        #print(\"--------- Geração {} ---------\" .format(i))\n","        #Calcula o fitnes (aptidao) de cada individuo\n","        fitness = cal_fitness(pesos, valores, populacao, max_peso_mochila)\n","        # Armazena na variavel de historico\n","        historico_fitness.append(fitness)\n","        #Pais selecionados\n","        pais = selecao_roleta(fitness, numero_pais, populacao)\n","        #print('Valores de fitness {}' .format(str(fitness)))\n","        #gerando os filhos\n","        filhos = crossover(pais, numero_filhos)\n","        #mutando os filhos\n","        filhos_mutados = mutacao(filhos)\n","        #ajustando a populacao \n","        populacao[0:pais.shape[0], :] = pais\n","        populacao[pais.shape[0]:, :] = filhos_mutados\n","\n","    print('Ultima geração: \\n{}\\n'.format(populacao))\n","    fitness_ultima_geracao = cal_fitness(pesos, valores, populacao, max_peso_mochila)\n","    print('Fitness Ultimo  Geração: \\n{}\\n'.format(fitness_ultima_geracao))\n","    #Encontra o melhor individuo\n","    max_fitness = np.where(fitness_ultima_geracao == np.max(fitness_ultima_geracao))\n","    #salva o melhor individuo\n","    parametros.append(populacao[max_fitness[0][0],:])\n","    return parametros, historico_fitness"],"metadata":{"id":"o-wPtvfohJ9U","executionInfo":{"status":"ok","timestamp":1654015233664,"user_tz":180,"elapsed":20,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["parametros, historico_fitness = rodar_AG(pesos,\n","                                         valores,\n","                                         populacao_inicial,\n","                                         tamanho_populacao,\n","                                         n_geracoes,\n","                                         max_peso_mochila)\n","print('Os parametros otimizados para as entradas fornecidas sao: \\n{}'.format(parametros))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":434},"id":"YczPUJICjqcj","executionInfo":{"status":"error","timestamp":1654015234067,"user_tz":180,"elapsed":423,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}},"outputId":"cfb2f696-bcbf-4800-802a-4f8825128fbb"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Numero de pais 4 e Numero de filhos 4\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: RuntimeWarning: invalid value encountered in true_divide\n","  \n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-e16607a8c74a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m                                          \u001b[0mtamanho_populacao\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                                          \u001b[0mn_geracoes\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m                                          max_peso_mochila)\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Os parametros otimizados para as entradas fornecidas sao: \\n{}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparametros\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-32-4e382fe5acb4>\u001b[0m in \u001b[0;36mrodar_AG\u001b[0;34m(pesos, valores, populacao, tamanho_populacao, n_geracoes, max_peso_mochila)\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mhistorico_fitness\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitness\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0;31m#Pais selecionados\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mpais\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselecao_roleta\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfitness\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumero_pais\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpopulacao\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0;31m#print('Valores de fitness {}' .format(str(fitness)))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0;31m#gerando os filhos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-a7450323fc8c>\u001b[0m in \u001b[0;36mselecao_roleta\u001b[0;34m(fitness, numero_pais, populacao)\u001b[0m\n\u001b[1;32m      8\u001b[0m   selecionados = populacao[np.random.choice(len(populacao),\n\u001b[1;32m      9\u001b[0m                                             \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumero_pais\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m                                             p=probabilidades)]\n\u001b[0m\u001b[1;32m     11\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mselecionados\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mmtrand.pyx\u001b[0m in \u001b[0;36mnumpy.random.mtrand.RandomState.choice\u001b[0;34m()\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: probabilities contain NaN"]}]},{"cell_type":"code","source":["itens_selecionados = numero_itens * parametros\n","print('\\n Itens selecionados que maximizarão a mochila sem quebra la:')\n","for i in range(itens_selecionados.shape[1]):\n","  if itens_selecionados[0][i] != 0:\n","    print('{}\\n'.format(itens_selecionados[0][i]))"],"metadata":{"id":"yLjbTSr3mw1c","executionInfo":{"status":"aborted","timestamp":1654015234063,"user_tz":180,"elapsed":413,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fitness_medio = [np.mean(fitness) for fitness in historico_fitness]\n","fitness_max = [np.max(fitness) for fitness in historico_fitness]\n","plt.plot(list(range(n_geracoes)), fitness_medio, label = 'Fitness Médio')\n","plt.plot(list(range(n_geracoes)), fitness_max, label = 'Fitness Maximo')\n","plt.legend()\n","plt.title('Fitness ao decorrer das geraç~eos')\n","plt.xlabel('Geração')\n","plt.ylabel('Fitness')\n","plt.show()\n","print(np.asarray(historico_fitness).shape)"],"metadata":{"id":"IPI1P-JFoHfN","executionInfo":{"status":"aborted","timestamp":1654015234066,"user_tz":180,"elapsed":6,"user":{"displayName":"vinicius chede","userId":"08365005719662170326"}}},"execution_count":null,"outputs":[]}]}